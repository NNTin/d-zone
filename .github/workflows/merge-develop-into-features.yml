name: Merge develop into feature branches

on:
  push:
    branches:
      - develop
      - feature/merge_develop_into_feature

permissions:
  contents: write  # Needed to push merged changes back to branches

jobs:
  list-feature-branches:
    name: List feature branches
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count: ${{ steps.set-matrix.outputs.count }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches

      - name: List feature branches
        id: list
        run: |
          # First, let's debug what we can see
          echo "=== Debugging remote branches ==="
          echo "All remote branches:"
          git branch -r
          echo ""
          echo "Remote feature branches with ls-remote:"
          git ls-remote --heads origin
          echo ""
          echo "Filtering for feature branches:"
          git ls-remote --heads origin | grep "refs/heads/feature/"
          echo "=== End debug ==="
          
          # Get remote branches starting with 'feature/'
          branches=$(git ls-remote --heads origin | grep "refs/heads/feature/" | awk '{print $2}' | sed 's#refs/heads/##')

          # Convert to JSON array, ensuring we always have a valid array
          if [ -z "$branches" ]; then
            echo "No feature branches found"
            json='["dummy-branch-that-does-not-exist"]'
            count=0
          else
            echo "Found feature branches: $branches"
            # Convert each line to a JSON array element
            json=$(echo "$branches" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            count=$(echo "$json" | jq 'length')
            echo "Generated JSON: $json"
          fi

          echo "Found $count feature branches"
          echo "matrix=$json" >> $GITHUB_OUTPUT
          echo "count=$count" >> $GITHUB_OUTPUT

      - name: Set matrix output
        id: set-matrix
        run: |
          echo "matrix=${{ steps.list.outputs.matrix }}" >> $GITHUB_OUTPUT
          echo "count=${{ steps.list.outputs.count }}" >> $GITHUB_OUTPUT

  merge-into-feature:
    name: Merge develop into ${{ matrix.branch }}
    needs: list-feature-branches
    if: needs.list-feature-branches.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.list-feature-branches.outputs.matrix) }}
    outputs:
      result: ${{ steps.merge.outputs.message }}
    steps:
      - name: Skip dummy branch
        if: matrix.branch == 'dummy-branch-that-does-not-exist'
        run: |
          echo "Skipping dummy branch"
          echo "message=Skipped dummy branch" >> $GITHUB_OUTPUT
          exit 0

      - name: Checkout feature branch
        if: matrix.branch != 'dummy-branch-that-does-not-exist'
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          fetch-depth: 0

      - name: Set up Git config
        if: matrix.branch != 'dummy-branch-that-does-not-exist'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Fetch develop branch
        if: matrix.branch != 'dummy-branch-that-does-not-exist'
        run: git fetch origin develop

      - name: Attempt to merge develop into ${{ matrix.branch }}
        if: matrix.branch != 'dummy-branch-that-does-not-exist'
        id: merge
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

          # Try the merge
          MERGE_OUTPUT=$(git merge origin/develop --no-commit --no-ff 2>&1) && MERGE_STATUS=$? || MERGE_STATUS=$?

          # Check the result
          if [[ "$MERGE_OUTPUT" == *"Already up to date."* ]]; then
            echo "message=${{ matrix.branch }}: Branch is already up to date with develop." >> $GITHUB_OUTPUT
            echo "merge_needed=false" >> $GITHUB_OUTPUT
            exit 0
          elif [[ $MERGE_STATUS -ne 0 ]]; then
            echo "message=${{ matrix.branch }}: Merge conflict detected when merging develop." >> $GITHUB_OUTPUT
            echo "merge_needed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "message=${{ matrix.branch }}: Successfully merged develop into branch." >> $GITHUB_OUTPUT
            echo "merge_needed=true" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Commit and push the merge
        if: matrix.branch != 'dummy-branch-that-does-not-exist' && steps.merge.outputs.merge_needed == 'true'
        run: |
          git commit -m "Merge branch 'develop' into ${{ matrix.branch }} [auto-merge]"
          git push origin HEAD:${{ matrix.branch }}

      - name: Show result
        if: matrix.branch != 'dummy-branch-that-does-not-exist'
        run: echo "${{ steps.merge.outputs.message }}"

  summarize:
    name: Summarize Merge Results
    needs: merge-into-feature
    if: needs.list-feature-branches.outputs.count != '0'
    runs-on: ubuntu-latest
    steps:
      - name: Write merge summary
        run: |
          echo "### Merge Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The results for merging \`develop\` into all \`feature/*\` branches are below:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- You can view each job's output to see merge status per branch." >> $GITHUB_STEP_SUMMARY
