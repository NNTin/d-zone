name: Versioned GitHub Pages Deployment

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build for production
        run: |
          VERSION=${{ github.event.inputs.version }}
          mkdir -p build/$VERSION
          npm run build:prod
          cp -r dist/* build/$VERSION

          # Create root index.html with hash-based routing (no redirects)
          cat > build/index.html << "EOF"
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>D-Zone</title>
            <style>
              body {
                margin: 0;
                padding: 0;
                background: #181213;
                color: white;
                font-family: Arial, sans-serif;
              }
              #loading {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                text-align: center;
              }
              #content {
                width: 100vw;
                height: 100vh;
                border: none;
                display: none;
              }
              .version-info {
                position: fixed;
                top: 10px;
                right: 10px;
                background: rgba(0,0,0,0.7);
                padding: 5px 10px;
                border-radius: 5px;
                font-size: 12px;
                z-index: 1000;
              }
            </style>
          </head>
          <body>
            <div id="loading">
              <div>Loading D-Zone...</div>
              <div id="version-display"></div>
            </div>
            <div class="version-info" id="version-info" style="display: none;"></div>
            <iframe id="content" src=""></iframe>

            <script>
              const DEFAULT_VERSION = 'VERSION_PLACEHOLDER';
              
              // Get current version from hash or use default
              function getCurrentVersion() {
                const hash = window.location.hash.slice(1); // Remove #
                return hash || DEFAULT_VERSION;
              }
              
              // Update the hash without triggering page reload
              function setVersion(version) {
                if (window.location.hash.slice(1) !== version) {
                  window.location.hash = version;
                }
              }
              
              // Load version content
              function loadVersion(version, preserveSocketURL = false) {
                const versionDisplay = document.getElementById('version-display');
                const versionInfo = document.getElementById('version-info');
                const content = document.getElementById('content');
                const loading = document.getElementById('loading');
                
                versionDisplay.textContent = `Version: ${version}`;
                versionInfo.textContent = `v${version}`;
                
                // Build the URL for the versioned content
                let contentUrl = `${version}/`;
                
                // Preserve socketURL parameter if present and requested
                const urlParams = new URLSearchParams(window.location.search);
                const socketURL = urlParams.get('socketURL');
                if (socketURL && preserveSocketURL) {
                  contentUrl += `?socketURL=${encodeURIComponent(socketURL)}`;
                }
                
                // Load content in iframe
                content.src = contentUrl;
                
                // Show loading state
                loading.style.display = 'block';
                content.style.display = 'none';
                versionInfo.style.display = 'none';
                
                // Handle iframe load
                content.onload = function() {
                  loading.style.display = 'none';
                  content.style.display = 'block';
                  versionInfo.style.display = 'block';
                };
                
                // Handle iframe error
                content.onerror = function() {
                  loading.innerHTML = `
                    <div>Error loading version ${version}</div>
                    <div>Please check if this version exists</div>
                  `;
                };
              }
              
              // Handle hash changes (for manual navigation or back/forward)
              function handleHashChange() {
                const version = getCurrentVersion();
                loadVersion(version, true);
              }
              
              // Initialize routing
              function initializeRouting() {
                const currentVersion = getCurrentVersion();
                
                // If no hash, set default version
                if (!window.location.hash) {
                  setVersion(DEFAULT_VERSION);
                }
                
                // Load the current version
                loadVersion(currentVersion, true);
                
                // Listen for hash changes
                window.addEventListener('hashchange', handleHashChange);
              }
              
              // Start the application
              document.addEventListener('DOMContentLoaded', initializeRouting);
              
              // Expose version switching function globally (for potential external use)
              window.switchToVersion = function(version) {
                setVersion(version);
                loadVersion(version, true);
              };
            </script>
          </body>
          </html>
          EOF

          # Replace the placeholder with actual version
          sed -i "s/VERSION_PLACEHOLDER/$VERSION/g" build/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          keep_files: true
